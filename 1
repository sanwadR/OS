## copy.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    if (argc < 3) {
        printf("Wrong command\n");
        printf("Exiting program\n");
        return 0;
    }

    char *src_file = argv[1];
    char *des_file = argv[2];

    char buffer[1000];
    char data_to_read[100];

    FILE *src = fopen(src_file, "r");
    FILE *des = fopen(des_file, "w");

    if (src == NULL || des == NULL) {
        printf("Error opening file(s)\n");
        printf("Exiting program\n");
        return 0;
    }

    while (fgets(data_to_read, 100, src)) {
        fputs(data_to_read, des);
    }

    printf("Data copied from source file to destination file\n");
    printf("Closing both the files\n");
    fclose(src);
    fclose(des);

    return 0;
}

## calls.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

void execute_cp(char *src, char *dest) {
    pid_t pid= fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        
        printf("child is executing");
        execlp("./copy", "copy", src, dest, NULL);
        exit(1);
    } else {
        
        wait(NULL); 
        printf("File copied from %s to %s\n", src, dest);
    }
}

void execute_grep(char *pattern, char *file) {
    pid_t pid = fork(); 

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        
        execlp("./grep_simulation", "grep_simulation", pattern, file, NULL); // Execute the 'grep' command
        perror("exec failed"); 
        exit(1);
    } else {
        
        wait(NULL); 
        printf("Search completed for pattern '%s' in file %s\n", pattern, file);
    }
}

int main() {
    int choice;
    char src[100], dest[100], pattern[100], file[100];

    while (1) {
        printf("\nLinux Command Simulation\n");
        printf("1. cp (Copy file)\n");
        printf("2. grep (Search for a pattern in a file)\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Source file: ");
                scanf("%s", src);
                printf("Destination file: ");
                scanf("%s", dest);
                execute_cp(src, dest);
                break;

            case 2:
                printf("Enter pattern :  ");
                scanf("%s", pattern);
                printf("Enter serch file :  ");
                scanf("%s", file);
                execute_grep(pattern, file);
                break;

            case 3:
                printf("Exiting program.\n");
                exit(0);
        }
    }

    return 0;
}


##grep_simulation.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 1024

int containsSubstring(const char *line, const char *pattern) {
    return strstr(line, pattern) != NULL;
}

int main(int argc, char *argv[]) {
 
    if (argc != 3) {
        printf("Usage: %s <pattern> <filename>\n", argv[0]);
        return 1;
    }

    const char *pattern = argv[1];  
    const char *filename = argv[2]; 

    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        return 1;
    }

    char line[MAX_LINE_LENGTH];
    int lineNumber = 0;

    printf("Searching for '%s' in %s:\n\n", pattern, filename);

    while (fgets(line, sizeof(line), file) != NULL) {
        lineNumber++;
        if (containsSubstring(line, pattern)) {
            printf("Line %d: %s", lineNumber, line);
        }
    }

    fclose(file);
    return 0;
}
