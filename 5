#include <stdio.h>
#include <stdlib.h>

// Function Declarations
void bankersAlgorithm();
void request();

void bankersAlgorithm() {
    int n, m, i, j, k;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    int alloc[n][m], max[n][m], avail[m];
   
    printf("Enter allocation Matrix (%d x %d):\n", n, m);
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter MAX Matrix (%d x %d):\n", n, m);
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter Available Resources (%d values):\n", m);
    for (i = 0; i < m; i++)
        scanf("%d", &avail[i]);

    int f[n], ans[n], ind = 0;
    for (k = 0; k < n; k++)
        f[k] = 0;

    int need[n][m];
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    int y = 0;
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0) {
                    ans[ind++] = i;
                    for (y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }

    int flag = 1;
    for (i = 0; i < n; i++) {
        if (f[i] == 0) {
            flag = 0;
            printf("The system is not in a safe state.\n");
            return;
        }
    }

    if (flag == 1) {
        printf("Following is the SAFE Sequence:\n");
        for (i = 0; i < n - 1; i++)
            printf(" P%d ->", ans[i]);
        printf(" P%d\n", ans[n - 1]);
    }
}

void request() {
    int n, m, i, j, process;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    int alloc[n][m], max[n][m], avail[m];

    printf("Enter allocation Matrix (%d x %d):\n", n, m);
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter MAX Matrix (%d x %d):\n", n, m);
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter Available Resources (%d values):\n", m);
    for (i = 0; i < m; i++)
        scanf("%d", &avail[i]);

    int need[n][m], f[n], ans[n], ind = 0;
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    printf("Enter process number (0 to %d) making the request: ", n - 1);
    scanf("%d", &process);

    int request[m];
    printf("Enter resource request for P%d: ", process);
    for (i = 0; i < m; i++)
        scanf("%d", &request[i]);

    for (i = 0; i < m; i++) {
        if (request[i] > need[process][i]) {
            printf("\nProcess P%d requested more than its maximum need. Request denied.\n", process);
            return;
        }
    }

    for (i = 0; i < m; i++) {
        if (request[i] > avail[i]) {
            printf("\nNot enough resources available. Request denied.\n");
            return;
        }
    }

    for (i = 0; i < m; i++) {
        avail[i] -= request[i];
        alloc[process][i] += request[i];
        need[process][i] -= request[i];
    }

    // **Fix: Declare `k` before using it**
    int k;
    for (k = 0; k < n; k++) f[k] = 0;
    ind = 0;
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0) {
                    ans[ind++] = i;
                    for (int y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }

    int flag = 1;
    for (i = 0; i < n; i++) {
        if (f[i] == 0) {
            flag = 0;
            printf("\nThe request leads to an unsafe state. Request denied.\n");
            return;
        }
    }

    printf("\nThe request is granted. System remains in a SAFE state.\nSafe Sequence: ");
    for (i = 0; i < n - 1; i++)
        printf(" P%d ->", ans[i]);
    printf(" P%d\n", ans[n - 1]);
}


int main() {
    int choice;
    int flag = 1;
    while (flag) {
        printf("\nEnter which Algorithm you want to apply\n");
        printf("1. SAFE \n2. REQUEST\n3. Exit\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                bankersAlgorithm();
                break;
            case 2:
                request();
                break;
            case 3:
                flag = 0;
                break;
            default:
                printf("Invalid choice\n");
                break;
        }
    }
    return 0;
}

